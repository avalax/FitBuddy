buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3'
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.github.ben-manes.versions'

android {
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
    compileSdkVersion 23
    buildToolsVersion '23.0.3'
    defaultConfig {
        applicationId "de.avalax.fitbuddy"
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
	testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
    if (System.getenv("KEYSTORE") && new File(System.getenv("KEYSTORE")).exists()) {
        signingConfigs {
            release {
                storeFile file(System.getenv("KEYSTORE"))
                storePassword System.getenv("KEYSTORE_PASSWORD")
                keyAlias System.getenv("KEY_ALIAS")
                keyPassword System.getenv("KEY_PASSWORD")
            }
        }
    } else {
        println 'KEYSTORE not set -> release build will not signed!'
    }
    buildTypes {
        debug {
            debuggable true
            testCoverageEnabled true
        }
        if (System.getenv("KEYSTORE") && new File(System.getenv("KEYSTORE")).exists()) {
            release {
                debuggable false
                minifyEnabled true
                zipAlignEnabled true
                proguardFiles "proguard.cfg"
                signingConfig signingConfigs.release
            }
        }
    }
}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile 'de.bechte.junit:junit-hierarchicalcontextrunner:4.12.1'
    testCompile('org.robolectric:robolectric:3.0') {
        exclude module: 'commons-logging'
        exclude module: 'httpclient'
    }
    androidTestCompile 'com.android.support:support-annotations:23.3.0'
    androidTestCompile 'com.android.support.test:runner:0.4.1'
    androidTestCompile 'com.android.support.test:rules:0.4.1'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
    provided 'com.squareup.dagger:dagger-compiler:1.2.4'
    compile 'com.google.code.gson:gson:2.6.2'
    compile 'com.android.support:support-v4:23.3.0'
    compile 'com.squareup.dagger:dagger:1.2.4'
    compile 'com.google.zxing:android-integration:3.2.1'
}

apply plugin: 'jacoco'

jacoco.toolVersion = "0.7.6.201602180812"

task jacocoTestReport(type: JacocoReport) {
	dependsOn project.tasks.withType(Test)
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: "${project.buildDir}/intermediates/classes/debug",
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/*$ViewBinder*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*',
                       '**/*InjectAdapter*.class',
                       '**/*$ModuleAdapter*.class',
                       '**/*Application*.class',
                       '**/*Module.class',
                       '**/*Fragment*.class',
                       '**/*Activity*.class',
                       '**/*View.class',
                       '**/*Listener*.class']
    )

    sourceDirectories = files('src/main/java')
    executionData = files("${project.buildDir}/jacoco/testDebugUnitTest.exec")

    reports {
        xml.enabled = true
        html.enabled = true
        xml.destination = "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        html.destination = "${project.buildDir}/reports/jacoco/test"
    }

    doFirst {
        new File("${project.buildDir}/intermediates/classes").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}

apply plugin: 'checkstyle'

task checkstyle(type: Checkstyle) {
	configFile rootProject.file('checkstyle.xml')
	source 'src/main/java'
	ignoreFailures true
	showViolations true
	include '**/*.java'
		
	classpath = files()
}

afterEvaluate {
	if (project.tasks.findByName('check')) {
		check.dependsOn('checkstyle')
	}
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}
