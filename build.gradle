buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.3'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    }
}

plugins {
    id "org.standardout.versioneye" version "1.4.0"
	id "com.github.ben-manes.versions" version "0.13.0"
	id "com.github.kt3k.coveralls" version "2.7.1"

}

allprojects {
    repositories {
        jcenter()
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

android {
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
    compileSdkVersion 25
    buildToolsVersion '25.0.2'
    defaultConfig {
        applicationId "de.avalax.fitbuddy"
        minSdkVersion 19
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "de.avalax.fitbuddy.runner.MockTestRunner"
    }
	lintOptions {
		abortOnError false
    }
	testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
    if (System.getenv("KEYSTORE") && new File(System.getenv("KEYSTORE")).exists()) {
        signingConfigs {
            release {
                storeFile file(System.getenv("KEYSTORE"))
                storePassword System.getenv("KEYSTORE_PASSWORD")
                keyAlias System.getenv("KEY_ALIAS")
                keyPassword System.getenv("KEY_PASSWORD")
            }
        }
    } else {
        println 'KEYSTORE not set -> release build will not signed!'
    }
    buildTypes {
        debug {
            debuggable true
            testCoverageEnabled true
        }
        if (System.getenv("KEYSTORE") && new File(System.getenv("KEYSTORE")).exists()) {
            release {
                debuggable false
                minifyEnabled true
                zipAlignEnabled true
                proguardFiles "proguard.cfg"
                signingConfig signingConfigs.release
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile 'org.assertj:assertj-core:3.6.1'
    testCompile 'de.bechte.junit:junit-hierarchicalcontextrunner:4.12.1'
    testCompile('org.robolectric:robolectric:3.1.4') {
        exclude module: 'commons-logging'
        exclude module: 'httpclient'
    }
    androidTestCompile 'com.android.support:support-annotations:25.1.0'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'com.android.support:support-v4:25.1.0'
    compile 'com.google.zxing:android-integration:3.3.0'
    compile 'com.google.dagger:dagger:2.8'
    apt 'com.google.dagger:dagger-compiler:2.8'
    androidTestApt 'com.google.dagger:dagger-compiler:2.8'
}

versioneye {
    exclude 'androidJacocoAgent', 'androidJacocoAnt'
}

apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.7.7.201606060606"
}

task jacocoTestReport(type: JacocoReport) {
	dependsOn project.tasks.withType(Test)
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: "${project.buildDir}/intermediates/classes/debug",
            excludes:   ['**/R.class',
                        '**/R$*.class',
                        '**/BuildConfig.*',
                        '**/Manifest*.*',
                        '**/FitbuddyModule*.*',
                        '**/*_MembersInjector.*',
                        '**/*Application*.class',
                        '**/*Fragment*.class',
                        '**/*Activity*.class',
                        '**/*View.class',
                        '**/*Listener*.class']
                        )

    sourceDirectories = files('src/main/java')
    executionData = files("${project.buildDir}/jacoco/testDebugUnitTest.exec")

    reports {
        xml.enabled = true
        html.enabled = true
        xml.destination = "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        html.destination = "${project.buildDir}/reports/jacoco/test"
    }
}

apply plugin: 'checkstyle'

checkstyle {
    toolVersion = "7.3"
}

task checkstyle(type: Checkstyle) {
	configFile rootProject.file('checkstyle.xml')
	source 'src/main/java'
	ignoreFailures true
	showViolations true
	include '**/*.java'
		
	classpath = files()
}

afterEvaluate {
	if (project.tasks.findByName('check')) {
		check.dependsOn('checkstyle')
	}
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14.1'
}

apply plugin: 'pmd'

pmd{
    toolVersion="5.5.2"
}

task pmd(type: Pmd) {
    ruleSetFiles = files("pmd.xml")
    ignoreFailures = true
    source 'src/main/java'

    reports {
        xml.enabled = true
        html.enabled = true
        xml.destination "$reportsDir/pmd/pmd.xml"
        html.destination "$reportsDir/pmd/pmd.html"
    }
}

afterEvaluate {
    if (project.tasks.findByName('check')) {
        check.dependsOn('pmd')
    }
}

apply plugin: 'findbugs'

findbugs{
    toolVersion="3.0.1"
}

task findbugs(type: FindBugs) {
    ignoreFailures = true
    classes = files('build/intermediates/classes/debug')
    source = fileTree('src/main/java/')
    classpath = files()
    excludeFilter = new File("findbugs.xml")

    effort = 'max'
    reports {
        xml.enabled = true
        html.enabled = false
        xml.destination "$reportsDir/findbugs/findbugs.xml"
    }
}

afterEvaluate {
    if (project.tasks.findByName("check")) {
        check.dependsOn('findbugs')
    }
}
