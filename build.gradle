buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.1'
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.7'
        classpath 'org.robolectric:robolectric-gradle-plugin:0.14.1'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.1.0'
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply plugin: 'robolectric'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.github.ben-manes.versions'

android {
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    compileSdkVersion 21
    buildToolsVersion "21.1.2"
    defaultConfig {
        applicationId "de.avalax.fitbuddy"
        minSdkVersion 14
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }
    if (System.getenv("KEYSTORE") && new File(System.getenv("KEYSTORE")).exists()) {
        signingConfigs {
            release {
                storeFile file(System.getenv("KEYSTORE"))
                storePassword System.getenv("KEYSTORE_PASSWORD")
                keyAlias System.getenv("KEY_ALIAS")
                keyPassword System.getenv("KEY_PASSWORD")
            }
        }
    } else {
        println 'KEYSTORE not set -> release build will not signed!'
    }
    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            testCoverageEnabled true
        }
        if (System.getenv("KEYSTORE") && new File(System.getenv("KEYSTORE")).exists()) {
            release {
                debuggable false
                minifyEnabled true
                zipAlignEnabled true
                proguardFiles "proguard.cfg"
                signingConfig signingConfigs.release
            }
        }
    }
    sourceSets {
        androidTest {
            setRoot('src/test')
        }
    }
}

robolectric {
    include '**/*Test.class'
}

dependencies {
    androidTestCompile 'org.hamcrest:hamcrest-all:1.3'
    androidTestCompile 'junit:junit:4.12'
    androidTestCompile 'org.mockito:mockito-all:1.10.19'
    androidTestCompile 'de.bechte.junit:junit-hierarchicalcontextrunner:4.12.0'
    androidTestCompile('org.robolectric:robolectric:2.4') {
        exclude module: 'commons-logging'
        exclude module: 'httpclient'
    }
    provided 'com.squareup.dagger:dagger-compiler:1.2.2'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.android.support:support-v4:21.0.3'
    compile 'com.squareup.dagger:dagger:1.2.2'
    compile 'com.jakewharton:butterknife:6.0.0'
    compile 'com.google.zxing:android-integration:3.1.0'
}

apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.7.1.201405082137"
}

def coverageSourceDirs = [
        'src/main/java'
]

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebug") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: 'build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*',
                       '**/*InjectAdapter*.class',
                       '**/*$ModuleAdapter*.class',
                       '**/*Application*.class',
                       '**/*Module.class',
                       '**/*Fragment*.class',
                       '**/*Activity*.class',
                       '**/*View.class',
                       '**/*Listener*.class']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('build/jacoco/testDebug.exec')

    reports {
        xml.enabled = true
        html.enabled = true
        xml.destination = "build/reports/jacoco/test/jacocoTestReport.xml"
        html.destination = "build/reports/jacoco/test"
    }

    doFirst {
        new File('build/intermediates/classes/').eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}
